# MacOS only aliases and functions
# ricdros' custom aliases
#alias ls='ls -G'
alias brewupgrade='brew update && brew upgrade && echo "You may want to run brew cleanup -n or just brew cleanup, also if pyenv was upgraded you will need to reinstall python"'
alias ldd='otool -L'
alias update='softwareupdate -l'

function upall () {
  msg_info 'sudo softwareupdate -i -a;'
  sudo softwareupdate -i -a;

  #msg_info 'mas upgrade;'
  #mas upgrade;

  msg_info 'brew cu -y;'
  brew cu -y;

  msg_info 'brew update; brew upgrade; brew cleanup;'
  msg_info 'if brew update fails you can try brew update-reset'
  brew update; brew upgrade; brew cleanup;

  msg_info 'cd ~/.asdf/plugins/python/pyenv/ && git pull && cd -'
  cd ~/.asdf/plugins/python/pyenv/ && git pull && cd -

  msg_info 'asdf update; asdf plugin-update --all'
  asdf update; asdf plugin-update --all

  msg_info 'npm install -g npm; npm update -g;'
  npm install -g npm; npm update -g;

  msg_info 'yarn global upgrade;'
  yarn global upgrade;

  msg_info 'gem update --system; gem update;'
  gem update --system; gem update;

  msg_info "pip3 list --outdated --format=freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U;"
  pip3 list --outdated --format=freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U;

  msg_info 'mackup backup and rclone'
  mackup backup;
  rclone sync -v --password-command "keyring get dot-files RCLONE_CONFIG_PASS" ~/.dot-files-rclone/ dot-files:MacOS;
  rclone sync -v --password-command "keyring get dot-files RCLONE_CONFIG_PASS" ~/.dot-files-rclone/ dot-files-dropbox:MacOS;
}

function watch () {
  local COMMAND=${1}
  local SECONDS=${2}
  while true ; do clear && echo "Watching ${COMMAND} every ${SECONDS} seconds" && ${COMMAND} && sleep ${SECONDS} ; done
}

function gitgrepreplace () {
  local OLD_TEXT="${1}"
  local NEW_TEXT="${2}"
  local GREP_PATH="${3:-.}"
  local SEPARATOR="${4:-!}"
  local REPLACE="s${SEPARATOR}${OLD_TEXT}${SEPARATOR}${NEW_TEXT}${SEPARATOR}g"
  git grep -l "${OLD_TEXT}" "${GREP_PATH}" | xargs gsed -i "${REPLACE}"
}

function fixlens() {
  # Temporary fix to remove non FOSS extensions from lens
  msg_warn "Try to remove /Applications/Lens.app/Contents/Resources/extensions/lenscloud-lens-extension"
  rm -rf rm -rf /Applications/Lens.app/Contents/Resources/extensions/lenscloud-lens-extension
  msg_warn "Try to remove ~/Library/Application\ Support/Lens/node_modules/lenscloud-lens-extension"
  rm -rf ~/Library/Application\ Support/Lens/node_modules/lenscloud-lens-extension
  msg_warn "Try to remove line matching 'lenscloud-lens-extension' in file ~/Library/Application\ Support/Lens/package.json"
  sed -i '' '/lenscloud-lens-extension/d' ~/Library/Application\ Support/Lens/package.json
}

function getent() {
  # Trying to make dscacheutil like getent
  # in macOS `man dscacheutil`
  # in Linux `man getent`
  local CATEGORY=${1:-host}
  local QUERY_KEY=${3:-name}
  local QUERY_VALUE=${2}
  dscacheutil -q ${CATEGORY} -a ${QUERY_KEY} ${QUERY_VALUE}
}

function cleancontainers() {
  docker rm $(docker ps -qa -f status=exited);
  docker rmi $(docker images -qa -f dangling=true)
}

function cleandockervolumes() {
  docker volume rm $(docker volume ls -f dangling=true -q)
}

function base64encodestring() {
  local TEXT="${1}"
  base64 <<<"${TEXT}"
}

function base64decodestring() {
  local TEXT="${1}"
  base64 -D <<<"${TEXT}"
}
