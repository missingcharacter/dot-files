#!/usr/bin/env bash
# Enable bash's unofficial strict mode
GITROOT=$(git rev-parse --show-toplevel)
# shellcheck disable=SC1091
. "${GITROOT}"/lib/strict-mode
strictMode
# Enabling utils
# shellcheck disable=SC1091
. "${GITROOT}"/lib/utils
# shellcheck disable=SC1091
. "${GITROOT}"/Ubuntu/base

export TMP_DOT_FILES
TMP_DOT_FILES=$(mktemp -d dot-files.XXXX)

function cleanup() {
  echo "Deleting ${TMP_DOT_FILES}"
  rm -rf "${TMP_DOT_FILES}"
}
# Make sure cleanup runs even if this script fails
trap cleanup EXIT

function get_deb_url_from_xpath() {
  local url="${1}"
  local xpath="${2}"
  local deb_url
  deb_url="$(curl -s \
      "${url}" | \
      xmllint --html \
      --xpath "${xpath}" - 2> /dev/null)"
  if [[ "${#deb_url}" -lt 4 ]]; then
    return 1
  fi
  echo "${deb_url}"
}

function is_repo_present() {
  local repo="${1}"
  grep -v -E '^#|^ *$' /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep -Fq "${repo/ppa:/}"
}

function add_apt_repo() {
  local repo="${1}"
  local file_name="${2}"
  msg_info "will try to remove repository ${repo} if it exists already"
  if ! is_repo_present "${repo}"; then
    if [[ "${repo}" =~ ^ppa:.*/ppa$ ]]; then
      sudo add-apt-repository -y "${repo}"
    else
      echo "${repo}" | sudo tee /etc/apt/sources.list.d/"${file_name}".list > /dev/null
    fi
  fi
}

function add_apt_key() {
  local url="${1}"
  local key_name="${2}"
  local file_name="${TMP_DOT_FILES}/${key_name}.gpg"
  msg_info "Working on apt_key ${key_name}"
  curl -fsSL "${url}" | gpg --dearmor > "${file_name}"
  sudo install -o root -g root -m 644 "${file_name}" /etc/apt/trusted.gpg.d/
}

function store_key() {
  local url="${1}"
  local file_name="${2}"
  local full_path="/etc/apt/keyrings/${file_name}"
  msg_info "Working on keyring ${key_name}"
  sudo curl -fsSL "${url}" -o "${full_path}"
  sudo chmod a+r "${full_path}"
  msg_info "Created ${full_path}"
}

function are_extra_cli_tools_installed() {
  declare -a extra_cli_tools=('bash-completion'
    'ca-certificates'
    'cmake'
    'libcurl4'
    'libcurl4-openssl-dev'
    'libxml2'
    'libxml2-dev'
    'nala'
    'pandoc'
    'pkg-config'
    'tshark')
  install_if_not_installed 'apt' 'n' "${extra_cli_tools[@]}"
}

function are_extra_tools_installed() {
  declare -a extra_ubuntu_tools=(
    'gh'
    'ghostwriter'
    'network-manager-openvpn-gnome'
    'openvpn-systemd-resolved'
    'pinta'
    'sublime-text'
    'transmission-gtk'
    'ubuntu-cleaner'
    'vlc'
    'wezterm'
    'wireguard'
    'wireshark-gtk')
  install_if_not_installed 'apt' 'n' "${extra_ubuntu_tools[@]}"
  declare -a extra_brew_tools=(
    'bat'
    'bfg'
    'fd'
    'fpp'
    'bitwarden-cli'
    'ripgrep'
    'shellcheck'
    'shfmt'
    'termshark'
    'tmux')
  install_if_not_installed 'brew' 'n' "${extra_brew_tools[@]}"
}

function is_docker_installed() {
  if [[ ! -x $(command -v docker) ]]; then
    declare -a docker_deps=('apt-transport-https'
      'ca-certificates'
      'curl'
      'gnupg-agent')
    install_if_not_installed 'apt' 'n' "${docker_deps[@]}"
    sudo apt -y install docker-ce docker-ce-cli containerd.io
  fi
}

function download_and_install_deb() {
  local deb_url="${1}"
  local deb_name="${2}"
  local deb_file_name="${deb_name}.deb"
  local file_name="${TMP_DOT_FILES}/${deb_file_name}"

  if ! grep -q "${deb_name}" <(sudo apt list --installed 2> /dev/null); then
    msg_info "Will download and install ${deb_name}"
    curl -Lv "${deb_url}" -o "${file_name}"
    sudo apt install -y "${file_name}"
  else
    msg_info "${deb_name} is installed already"
  fi
}

function install_desktop_apps() {
  msg_info 'Adding apt keys for docker, sublime-text'
  declare -A apt_keys=(
    ['sublime']='https://download.sublimetext.com/sublimehq-pub.gpg'
    ['wezterm-fury']='https://apt.fury.io/wez/gpg.key'
  )

  for key_name in "${!apt_keys[@]}"; do
    add_apt_key "${apt_keys[${key_name}]}" "${key_name}"
  done

  declare -A keyrings=(
    ['docker.asc']='https://download.docker.com/linux/ubuntu/gpg'
    ['githubcli-archive-keyring.gpg']='https://cli.github.com/packages/githubcli-archive-keyring.gpg'
  )

  sudo install -m 0755 -d /etc/apt/keyrings
  for keyring in "${!keyrings[@]}"; do
    store_key "${keyrings[${keyring}]}" "${keyring}"
  done

  echo "Adding repositories: docker, GhostWriter, sublime-text"
  declare -A repositories=(
    ['docker']="deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    ['github-cli']="deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
    ['ghostwriter']='ppa:wereturtle/ppa'
    ['ubuntu-cleaner']='ppa:gerardpuig/ppa'
    ['sublime']='deb [signed-by=/etc/apt/trusted.gpg.d/sublime.gpg] https://download.sublimetext.com/ apt/stable/'
    ['wezterm']='deb [signed-by=/etc/apt/trusted.gpg.d/wezterm-fury.gpg] https://apt.fury.io/wez/ * *'
  )

  for key in "${!repositories[@]}"; do
    add_apt_repo "${repositories[${key}]}" "${key}"
  done

  echo "Installing Google Chrome Stable, Slack"
  local latest_slack latest_flameshot
  latest_slack="$(get_deb_url_from_xpath 'https://slack.com/downloads/instructions/linux?ddl=1&build=deb' 'string(/html/body/main/section[1]/iframe/@src)')"
  latest_flameshot="$(get_latest_github_tag 'flameshot-org' 'flameshot' 'true')"
  declare -A deb_packages=(
    ['1password']='https://downloads.1password.com/linux/debian/amd64/stable/1password-latest.deb' # pragma: allowlist secret
    ['google-chrome-stable']='https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'
    ['slack']="${latest_slack}"
    ['nala']='https://deb.volian.org/volian/pool/main/v/volian-archive/volian-archive-nala_0.3.1_all.deb'
    ['volian-keyring']='https://deb.volian.org/volian/pool/main/v/volian-archive/volian-archive-keyring_0.3.1_all.deb'
    ['flameshot']="https://github.com/flameshot-org/flameshot/releases/download/v${latest_flameshot}/flameshot-${latest_flameshot}-1.ubuntu-22.04.amd64.deb"
  )

  for key in "${!deb_packages[@]}"; do
    download_and_install_deb "${deb_packages[${key}]}" "${key}"
  done

  retry_command "10" "sudo" "apt" "update"

  is_docker_installed
  are_extra_tools_installed

  # needed for multiple apps
  mkdir -p "${HOME}/bin" || true
  local home_bin
  home_bin="${HOME}/bin"

  if ! grep -q 'JetBrains Mono' <(fc-list); then
    echo 'Installing Jetbrains Font'
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/JetBrains/JetBrainsMono/master/install_manual.sh)"
    fc-cache -f -v
  fi

  if ! grep -q 'Nerd Font' <(fc-list); then
    echo 'Installing Nerd Fonts'
    if [[ ! -d "${HOME}/src/nerd-fonts" ]]; then
      git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git "${HOME}/src/nerd-fonts"
    fi
    cd "${HOME}/src/nerd-fonts" || exit 1
    ./install.sh -q
    cd - || exit 1
    fc-cache -f -v
  fi

  if ! piactl --version &>/dev/null; then
    echo "Installing Private Internet Access"
    local latest_pia_installer
    latest_pia_installer=$(curl \
        'https://www.privateinternetaccess.com/installer/x/download_installer_linux' | \
        xmllint --html --xpath '//html/head/meta[5]/@content' - 2> /dev/null | cut -d '"' -f2 | cut -d '=' -f2)
    curl -Lv "${latest_pia_installer}" -o "${TMP_DOT_FILES}/pia-linux.run"
    sh "${TMP_DOT_FILES}/pia-linux.run"
  fi

  if ! jetbrains-toolbox --version &>/dev/null; then
    echo "Installing JetBrains Toolbox"
    local latest_jetbrains_toolbox
    latest_jetbrains_toolbox=$(curl -sL 'https://data.services.jetbrains.com//products/releases?code=TBA&latest=true&type=release' | jq -r '.TBA[].downloads.linux.link')
    curl -Lv "${latest_jetbrains_toolbox}" -o "${TMP_DOT_FILES}/jetbrains-toolbox.tar.gz"
    tar -xzvf "${TMP_DOT_FILES}/jetbrains-toolbox.tar.gz" -C "${TMP_DOT_FILES}"
    mv "${TMP_DOT_FILES}"/jetbrains-toolbox-*/jetbrains-toolbox "${home_bin}/"
  fi

  if ! grep -q 'Bourne-Again shell' <(file ~/.tmux/plugins/tpm/tpm); then
    echo "tmux plugin manager"
    mkdir -p ~/.tmux/plugins/tpm
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi
}

if ! /bin/grep -qi 'virtual' <(/bin/grep 'Product Name:' <(sudo dmidecode)); then
  install_desktop_apps
fi

flatpak install re.sonny.Junction -y
xdg-settings set default-web-browser re.sonny.Junction.desktop

are_extra_cli_tools_installed
