#!/usr/bin/env bash
# Enable bash's unofficial strict mode
GITROOT=$(git rev-parse --show-toplevel)
. ${GITROOT}/lib/strict-mode
strictMode
# Enabling utils
. ${GITROOT}/lib/utils
. ${GITROOT}/Ubuntu/base

function is_repo_present() {
  local REPO="${1}"
  if grep -q '^ppa:' <<<${REPO} ; then
    REPO="$(sed 's!ppa:!!'<<<${REPO})"
  fi
  egrep -v '^#|^ *$' /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep -Fq "${REPO}"
}

function add_apt_repo() {
  local REPO="${1}"
  echo "will try to remove repository ${REPO} if it exists already"
  if ! is_repo_present "${REPO}"; then
    sudo add-apt-repository -y "${REPO}"
  fi
}

function add_apt_key() {
  local URL="${1}"
  curl -fsSL "${URL}" | sudo apt-key add -
}

echo "Adding apt keys for docker, spotify, sublime-text, virtualbox"
APT_KEYS=(
  'https://downloads.1password.com/linux/keys/1password.asc'
  'https://download.docker.com/linux/ubuntu/gpg'
  'https://download.sublimetext.com/sublimehq-pub.gpg'
  'https://www.virtualbox.org/download/oracle_vbox_2016.asc'
  'https://www.virtualbox.org/download/oracle_vbox.asc'
)

for APT_KEY in "${APT_KEYS[@]}"; do
  add_apt_key "${APT_KEY}"
done

echo "Adding repositories: docker, GhostWriter, sublime-text, virtualbox"
REPOSITORIES=(
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  'ppa:wereturtle/ppa'
  'deb https://download.sublimetext.com/ apt/stable/'
  "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib"
)

for REPOSITORY in "${REPOSITORIES[@]}"; do
  add_apt_repo "${REPOSITORY}"
done

sudo apt update

function are_extra_tools_installed() {
  local EXTRA_UBUNTU_TOOLS=('bash-completion' 'ca-certificates' 'cmake' 'ghostwriter' 'grub-customizer' 'libcurl4' 'libcurl4-openssl-dev' 'libxml2' 'libxml2-dev' 'libssl1.1' 'network-manager-openvpn-gnome' 'openvpn-systemd-resolved' 'pandoc' 'pinta' 'pkg-config' 'sublime-text' 'termshark' 'transmission-gtk' 'tshark' 'vlc' 'virtualbox-6.1' 'wireguard' 'wireshark-gtk')
  install_if_not_installed EXTRA_UBUNTU_TOOLS 'apt' 'y'
  local EXTRA_BREW_TOOLS=('bfg' 'fpp' 'lastpass-cli' 'mitmproxy' 'rclone' 'ripgrep' 'shellcheck' 'termshark' 'tmux')
  flatpak install -y com.spotify.Client
}

are_extra_tools_installed

function is_docker_installed() {
  if [[ ! -x $(command -v docker) ]]; then
    local DOCKER_DEPS=('apt-transport-https' 'ca-certificates' 'curl' 'gnupg-agent')
    install_if_not_installed DOCKER_DEPS 'apt' 'y'
    sudo DEBIAN_FRONTEND='noninteractive' apt -y install docker-ce docker-ce-cli containerd.io
  fi
}

is_docker_installed

function download_and_install_deb() {
  local DEB_URL="${1}"
  local DEB_NAME="${2}"
  local DEB_FILE_NAME="${DEB_NAME}.deb"

  if ! grep -q "${DEB_NAME}" <(sudo apt list --installed 2> /dev/null); then
    msg_info "Will download and install ${DEB_NAME}"
    curl -Lv "${DEB_URL}" -o "${DEB_FILE_NAME}"
    sudo DEBIAN_FRONTEND='noninteractive' apt install -y "./${DEB_FILE_NAME}"
    rm "${DEB_FILE_NAME}"
  else
    msg_info "${DEB_NAME} is installed already"
  fi
}

echo "Installing visual studio code, Google Chrome Stable, Slack"
LATEST_SLACK="$(curl -s 'https://slack.com/downloads/instructions/ubuntu' | xmllint --html --xpath 'string(/html/body/main/section[3]/div/p[1]/a[1]/@href)' - 2> /dev/null )"
declare -A DEB_PACKAGES=(
  ['1password']='https://downloads.1password.com/linux/debian/amd64/stable/1password-latest.deb'
  ['code']='https://go.microsoft.com/fwlink/?LinkID=760868'
  ['google-chrome-stable']='https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'
  ['slack']="${LATEST_SLACK}")

for KEY in "${!DEB_PACKAGES[@]}"; do
  download_and_install_deb "${DEB_PACKAGES[${KEY}]}" "${KEY}"
done

TMP_DOT_FILES=$(mktemp -d dot-files.XXXX)

# needed for multiple apps
mkdir -p "${HOME}/bin" || true
HOME_BIN="${HOME}/bin"

if ! grep -q 'Oracle VM VirtualBox Extension Pack' <(sudo VBoxManage list extpacks); then
  echo 'Installing virtualbox Extension pack'
  LATEST_EXT_PACK=$(curl 'https://www.virtualbox.org/wiki/Downloads' | xmllint --html --xpath 'string(//html/body/div[4]/div[3]/div[3]/div/div[2]/ul[3]/li/a/@href)' - 2> /dev/null)
  curl -Lv "${LATEST_EXT_PACK}" -o "${TMP_DOT_FILES}/Oracle_VM_VirtualBox_Extension_Pack.vbox-extpack"
  sudo VBoxManage extpack install --replace "${TMP_DOT_FILES}/Oracle_VM_VirtualBox_Extension_Pack.vbox-extpack"
fi

if ! grep -q 'JetBrains Mono' <(fc-list); then
  echo 'Installing Jetbrains Font'
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/JetBrains/JetBrainsMono/master/install_manual.sh)"
  fc-cache -f -v
fi

if ! grep -q 'Nerd Font' <(fc-list); then
  echo 'Installing Nerd Fonts'
  git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git "${HOME}/src/nerd-fonts"
  cd "${HOME}/src/nerd-fonts"
  ./install.sh -q -A
  cd -
  fc-cache -f -v
fi

if ! piactl --version &>/dev/null; then
  echo "Installing Private Internet Access"
  LATEST_PIA_INSTALLER=$(curl 'https://www.privateinternetaccess.com/installer/x/download_installer_linux' | xmllint --html --xpath '//html/head/meta[5]/@content' - 2> /dev/null | cut -d '"' -f2 | cut -d '=' -f2)
  curl -Lv "${LATEST_PIA_INSTALLER}" -o "${TMP_DOT_FILES}/pia-linux.run"
  sh "${TMP_DOT_FILES}/pia-linux.run"
fi

if ! jetbrains-toolbox --version &>/dev/null; then
  echo "Installing JetBrains Toolbox"
  LATEST_JETBRAINS_TOOLBOX=$(curl -sL 'https://data.services.jetbrains.com//products/releases?code=TBA&latest=true&type=release' | jq -r '.TBA[].downloads.linux.link')
  curl -Lv "${LATEST_JETBRAINS_TOOLBOX}" -o "${TMP_DOT_FILES}/jetbrains-toolbox.tar.gz"
  tar -xzvf "${TMP_DOT_FILES}/jetbrains-toolbox.tar.gz" -C "${TMP_DOT_FILES}"
  mv "${TMP_DOT_FILES}/jetbrains-toolbox-*/jetbrains-toolbox" "${HOME_BIN}/"
fi

if ! grep -q 'Bourne-Again shell' <(file ~/.tmux/plugins/tpm/tpm); then
  echo "tmux plugin manager"
  mkdir -p ~/.tmux/plugins/tpm
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

rm -rf "${TMP_DOT_FILES}"
