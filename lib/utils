#!/usr/bin/env bash
GITROOT=$(git rev-parse --show-toplevel)
# shellcheck disable=SC1091
. "${GITROOT}"/lib/strict-mode
strictMode

ANSI_NO_COLOR=$'\033[0m'

function msg_info() {
  local GREEN=$'\033[0;32m'
  printf "%s\n" "${GREEN}${*}${ANSI_NO_COLOR}" >&2
}

function msg_warn() {
  local YELLOW=$'\033[0;33m'
  printf "%s\n" "${YELLOW}${*}${ANSI_NO_COLOR}" >&2
}

function msg_error() {
  local RED=$'\033[0;31m'
  printf "%s\n" "${RED}${*}${ANSI_NO_COLOR}" >&2
}

function msg_fatal() {
  msg_error "${*}"
  exit 1
}

function check_ubuntu_dist() {
  if ! grep -i ubuntu /etc/os-release &> /dev/null; then
    msg_fatal "Only Ubuntu or Debian based linux distros are supported" >&2
  fi
}

function create_dir_if_not_exists() {
  local DIR="${1}"
  if [[ ! -d "${DIR}" ]]; then
    msg_info "Creating ${DIR} dir"
    mkdir "${DIR}"
  fi
}

function get_operatingsystem() {
  local kernel_name
  kernel_name="$(uname)"
  case "${kernel_name}" in
    Linux)
      check_ubuntu_dist
      echo -n 'Ubuntu'
      ;;
    Darwin)
      echo -n 'MacOS'
      ;;
    *)
      msg_fatal "Sorry, ${kernel_name} is not supported."
      ;;
  esac
}

function get_brew_location() {
  case "$(get_operatingsystem)" in
    Ubuntu)
      echo -n '/home/linuxbrew/.linuxbrew/bin/brew'
      ;;
    MacOS)
      if [[ "$(uname -m)" == 'arm64' ]]; then
        echo -n '/opt/homebrew/bin/brew'
      else
        echo -n '/usr/local/bin/brew'
      fi
      ;;
  esac
}

function get_latest_github_tag() {
  local owner="${1}"
  local repo="${2}"
  local remove_v="${3:-false}"
  local latest_tag
  latest_tag="$(curl -s "https://api.github.com/repos/${owner}/${repo}/releases/latest" | jq -r .tag_name)"
  if [[ "${remove_v}" == 'true' ]]; then
    echo -n "${latest_tag}" | tr -d 'v'
    return 0
  fi
  echo -n "${latest_tag}"
}

function source_mise() {
  disableStrictMode
  eval "$(mise activate bash)"
  strictMode
}

function source_brew() {
  local BREW
  BREW="$(get_brew_location)"
  eval "$("${BREW}" shellenv)"
  hash -r
}

function brew_taps() {
  source_brew
  case "$(get_operatingsystem)" in
    MacOS)
      # Note: Brew cask is not support on homebrew for linux
      brew tap buo/cask-upgrade
      ;;
    *)
      msg_info 'There are no OS specific taps for you'
      ;;
  esac
}

function is_brew_installed() {
  local ASK="${1:-'y'}"
  local ANSWER='y'
  if [[ ! -e "$(get_brew_location)" ]]; then
    msg_info 'Seems like brew is not installed'
    if [[ "${ASK}" == 'y' ]]; then
      ANSWER="$(get_user_reply 'Want me to install brew?')"
    fi
    echo
    if [[ ${ANSWER} =~ ^[Yy]$ ]]; then
      msg_info 'I will install brew now'
      echo | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      brew_taps
    fi
  fi
  source_brew
}

function get_os_specific_links() {
  local MACHINE_OS="${1}"

  cd "${GITROOT}/${MACHINE_OS}" || return 1
  declare -a OS_SPECIFIC_LINKS
  mapfile -t OS_SPECIFIC_LINKS < <(ls bash_*)
  cd - &> /dev/null || return 1

  # https://stackoverflow.com/questions/7577052/bash-empty-array-expansion-with-set-u
  return_non_empty_array "${OS_SPECIFIC_LINKS[@]+"${OS_SPECIFIC_LINKS[@]}"}"
}

function return_non_empty_array() {
  declare -a INPUT
  INPUT=("${@}")
  if [[ ${#INPUT[@]} -ne 0 ]]; then
    printf "%s\n" "${INPUT[@]}"
  fi
}

function link_if_not_exists() {
  local FILE="${1}"
  local LINK="${2}"
  if [[ -L "${LINK}" || -e "${LINK}" ]]; then
    local ASK_OVERWRITE
    ASK_OVERWRITE="$(get_user_reply "${LINK} exists, Want me to overwrite it?")"
    echo
    if [[ ${ASK_OVERWRITE} =~ ^[Yy]$ ]]; then
      ln -sf "${FILE}" "${LINK}"
    fi
  else
    msg_info "Creating ${FILE} symlink"
    ln -s "${FILE}" "${LINK}"
  fi
}

function get_user_reply() {
  local QUESTION="${1}"
  local RESET="\033[0m"
  local BOLD="\033[1m"
  local YELLOW="\033[38;5;11m"
  local USER_REPLY
  read -p "$(echo -e "${BOLD}${YELLOW}${QUESTION}${RESET}[Y or N] ")" -n 1 -r USER_REPLY
  echo -n "${USER_REPLY}"
}

# Install everything else
function install_everything_else() {
  # Install mise plugins and tools' versions
  install_mise_tool_versions
  hash -r

  msg_info "Sourcing ${HOME}/.bashrc"
  disableStrictMode
  # shellcheck disable=SC1091
  . "${HOME}"/.bashrc
  strictMode

  # Running post-install steps
  # shellcheck disable=SC1090,SC1091
  . "${GITROOT}/${MACHINE_OS}/post-install"
}

function retry_command() {
  # Source: https://github.com/aws-quickstart/quickstart-linux-utilities/blob/master/quickstart-cfn-tools.source#L413-L433
  # $1 = NumberOfRetries $2 = Command
  # retry_command 10 some_command.sh
  # Command will retry with linear back-off
  local -r __tries="${1}"; shift
  declare -a __run=("${@}")
  local -i __backoff_delay=2
  local __current_try=0
  until "${__run[@]}"
    do
      if (( __current_try == __tries ))
      then
        echo "Tried ${__current_try} times and failed!"
        return 1
      else
        echo "Retrying ...."
        sleep $(((__backoff_delay++) + (__current_try++)))
      fi
    done
}

function join_by {
  local IFS="${1}"
  shift
  echo "${*}"
}

function array_contains() {
  # Source: https://stackoverflow.com/questions/14366390/check-if-an-element-is-present-in-a-bash-array/14367368#14367368
  # How to:
  # arr=(a b c 'd e' f g)
  # array_contains 'a b' "${arr[@]}" && echo yes || echo no # no
  # array_contains 'd e' "${arr[@]}" && echo yes || echo no # yes
  local SEEKING="${1}"
  local ELEMENT
  shift
  declare -a ARRAY=("${@}")
  local IN=1
  for ELEMENT in "${ARRAY[@]}"; do
    if [[ "${ELEMENT}" == "${SEEKING}" ]]; then
      IN=0
      break
    fi
  done
  return ${IN}
}

function is_subarray_in_array() {
  # How to:
  # arr=(a b c 'd e' f g)
  # sub_arr=(b c)
  # not_sub_arr=(g h)
  # is_subarray_in_array arr sub_arr  && echo yes || echo no     # yes
  # is_subarray_in_array arr not_sub_arr  && echo yes || echo no # no
  # does not consider namerefs, see https://github.com/koalaman/shellcheck/issues/817
  # shellcheck disable=SC2178
  local -n ARRAY="${1}"
  local SUB_ARRAY="$2[@]"
  local IN=0
  local ELEMENT
  for ELEMENT in "${!SUB_ARRAY}"; do
    # shellcheck disable=SC2086
    array_contains "${ELEMENT}" "${ARRAY[@]}" && IN=0 || IN=1
    if [[ ${IN} -eq 1 ]]; then
      break
    fi
  done
  return ${IN}
}

function return_elements_not_in_array() {
  # How to:
  # arr=(a b c 'd e' f g)
  # sub_arr=(b c)
  # not_sub_arr=(g h)
  # return_elements_not_in_array arr sub_arr # nothing
  # return_elements_not_in_array arr not_sub_arr # h
  # does not consider namerefs, see https://github.com/koalaman/shellcheck/issues/817
  # shellcheck disable=SC2178
  local -n ARRAY="${1}"
  local SUB_ARRAY="$2[@]"
  local IN=0
  local ELEMENT
  declare MISSING_ELEMENTS=()
  for ELEMENT in "${!SUB_ARRAY}"; do
    if ! array_contains "${ELEMENT}" "${ARRAY[@]}"; then
      MISSING_ELEMENTS+=("${ELEMENT}")
    fi
  done

  # https://stackoverflow.com/questions/7577052/bash-empty-array-expansion-with-set-u
  return_non_empty_array "${MISSING_ELEMENTS[@]+"${MISSING_ELEMENTS[@]}"}"
}

function install_if_not_installed() {
  # How to:
  # arr=('build-essential' 'curl' 'file' 'git')
  # install_if_not_installed 'apt' 'y' "${arr[@]}"
  local COMMAND="${1}"
  shift
  local ASK="${1:-'y'}"
  shift
  # shellcheck disable=SC2034
  declare -a EXTRA_TOOLS=("${@}") INSTALLED_TOOLS=() TOOLS_TO_INSTALL=()
  local ANSWER='y'
  local -A LIST_COMMAND=(
    ['apt']="sudo apt list --installed 2>/dev/null | grep -v 'Listing' | cut -d '/' -f1"
    ['brew']='brew list'
    ['brewcask']='brew list --cask'
    ['code']='code --list-extensions'
    ['pip3']="pip3 list --format=freeze | cut -d '=' -f1")
  local -A INSTALL_COMMAND=(
    ['apt']="sudo apt install -y"
    ['brew']='brew install'
    ['brewcask']='brew install --cask'
    ['code']='code --install-extension'
    ['pip3']='pip3 install --upgrade')
  local -A INSTALL_COMMAND_TYPE=(
    ['apt']="multiple"
    ['brew']='multiple'
    ['brewcask']='multiple'
    ['code']='single'
    ['pip3']='multiple')
  # does not consider namerefs, see https://github.com/koalaman/shellcheck/issues/817
  # shellcheck disable=SC2034
  mapfile -t INSTALLED_TOOLS < <(bash -c "${LIST_COMMAND[${COMMAND}]}")
  while IFS= read -r tool; do
    if [[ -n ${tool} ]]; then
      TOOLS_TO_INSTALL+=("${tool}")
    fi
  done < <(return_elements_not_in_array INSTALLED_TOOLS EXTRA_TOOLS)

  # Check if extra tools are installed
  if [[ ${#TOOLS_TO_INSTALL[@]} -gt 0 ]]; then
    msg_info 'Seems like some (or all) the tools are missing'
    if [[ "${ASK}" == 'y' ]]; then
      ANSWER="$(get_user_reply 'Want me to install them?')"
      echo
    fi
    if [[ ${ANSWER} =~ ^[Yy]$ ]]; then
      if [[ "${INSTALL_COMMAND_TYPE[${COMMAND}]}" == 'multiple' ]]; then
        retry_command '3' 'bash' '-c' "${INSTALL_COMMAND[${COMMAND}]} $(join_by ' ' "${TOOLS_TO_INSTALL[@]}")"
      elif [[ "${INSTALL_COMMAND_TYPE[${COMMAND}]}" == 'single'  ]]; then
        for p in "${TOOLS_TO_INSTALL[@]}"; do
          retry_command '3' 'bash' '-c' "${INSTALL_COMMAND[${COMMAND}]} ${p}"
        done
      fi
    fi
  fi
}

function get_git_tags() {
  # How to:
  # repo_url="https://github.com/JetBrains/kotlin"
  # tags_from_repo=( $(get_git_tags ${repo_url}) )
  # echo "latest tag from ${repo_url} is: ${tags_from_repo[-1]}"
  local VERSION_REGEX='([0-9]*)\.(.*)'
  local REPO_URL="${1}"
  local TAG
  for TAG in $(git ls-remote --tags --refs "${REPO_URL}"); do
    if [[ ${TAG} =~ refs/tags/v${VERSION_REGEX}$ ]]; then
      echo "${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
    fi
  done \
      | LC_ALL=C sort -t '.' -k 1,1n -k 2,2n -k 3,3n -k 4,4d -k 5,5d
}

function install_mise_tool_versions() {
  # cd to home folder
  cd || exit 1
  mise install
  # come back to folder we were before we went to home folder
  cd - || exit 1
  # trust `mise/config.toml` so tools and their versions are available in this
  # repo too
  mise trust
}
