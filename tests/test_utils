#!/usr/bin/env bash
# Enable bash's unofficial strict mode
GITROOT=$(git rev-parse --show-toplevel)
# shellcheck disable=SC1091
. "${GITROOT}"/lib/strict-mode
strictMode
# Enabling utils
# shellcheck disable=SC1091
. "${GITROOT}"/lib/utils


function test_arrays() {
  # does not consider namerefs, see https://github.com/koalaman/shellcheck/issues/817
  # shellcheck disable=SC2034
  declare -a arr=(a b c 'd e' f g) sub_arr=(b c) not_sub_arr=(g h i)
  echo 'Testing an array that does NOT contain an item'
  array_contains 'a b' "${arr[@]}" && echo 'yes' || echo 'no'      # Should be no
  echo 'Testing an array that DOES contain an item'
  array_contains 'd e' "${arr[@]}" && echo 'yes' || echo 'no'      # Should be yes
  echo 'Testing a sub-array IN an array'
  is_subarray_in_array arr sub_arr  && echo 'yes' || echo 'no'     # Should be yes
  echo 'Testing an array that is NOT in another array'
  is_subarray_in_array arr not_sub_arr  && echo 'yes' || echo 'no' # Should be no
  declare -a should_be_empty=() should_not_be_empty=()
  while IFS= read -r i; do
    if [[ -n ${i} ]]; then
      should_be_empty+=("${i}")
    fi
  done < <(return_elements_not_in_array arr sub_arr)
  while IFS= read -r i; do
    if [[ -n ${i} ]]; then
      should_not_be_empty+=("${i}")
    fi
  done < <(return_elements_not_in_array arr not_sub_arr)
  if [[ ${#should_be_empty[@]} -eq 0 ]]; then
    echo "array that should_be_empty is of length: ${#should_be_empty[@]}"
  fi
  if [[ ${#should_not_be_empty[@]} -gt 0 ]]; then
    echo "array that should_not_be_empty is of length: ${#should_not_be_empty[@]}"
    echo "and has elements: ${should_not_be_empty[*]}"
  fi
}

test_arrays

function test_latest_tag() {
  local repo1="https://github.com/JetBrains/kotlin"
  local repo2="https://github.com/asdf-vm/asdf.git"
  echo "Getting tags for ${repo1}"
  declare -a tags_from_repo1 tags_from_repo2
  mapfile -t tags_from_repo1 < <(get_git_tags "${repo1}")
  echo "Number of tags from repo1 are: ${#tags_from_repo1[@]}"
  echo "Latest tag from repo1 is: ${tags_from_repo1[-1]}"
  echo "Getting tags for ${repo2}"
  mapfile -t tags_from_repo2 < <(get_git_tags "${repo2}")
  echo "Number of tags from repo2 are: ${#tags_from_repo2[@]}"
  echo "Latest tag from repo2 is: ${tags_from_repo2[-1]}"
}

test_latest_tag

# Setting up retry

function always_return_1() {
  return 1
}

export -f always_return_1

export FAIL_COUNT=0

function fail_twice() {
  local RETVAL=1
  if [[ "${FAIL_COUNT}" -ge 2 ]]; then
    RETVAL=0
  fi
  ((FAIL_COUNT=FAIL_COUNT+1))
  return "${RETVAL}"
}

export -f fail_twice

function test_retry() {
  echo 'Retrying only 3 times a command that will always fail'
  retry_command '3' 'always_return_1' && echo 'yes' || echo 'no' # should be no
  echo 'Retrying twice and then succeeds'
  retry_command '3' 'fail_twice' && echo 'yes' || echo 'no'      # should be yes
}

test_retry
