#!/usr/bin/env bash
# Enable bash's unofficial strict mode
GITROOT=$(git rev-parse --show-toplevel)
. ${GITROOT}/lib/strict-mode
strictMode
# Enabling utils
. ${GITROOT}/lib/utils

function is_brew_installed() {
  local USER_REPLY="${1:-''}"
  if [[ ! -x $(command -v brew &> /dev/null) ]]; then
    msg_info 'Seems like brew is not installed'
    if [[ "${USER_REPLY}" == 'y' ]]; then
      msg_info 'I will install it righ away'
    elif [[ "${USER_REPLY}" == 'n' ]]; then
      msg_warn 'You already said no, I will not install it'
    else
      read -p 'Want me to install it? ' -n 1 -r USER_REPLY
    fi
    echo
    if [[ ${USER_REPLY} =~ ^[Yy]$ ]]; then
      sudo softwareupdate -i -a
      xcode-select --install
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      # Source: https://github.com/Homebrew/homebrew-bundle#install
      #brew bundle # maybe later when I have a Brewfile
      eval "$(/usr/local/bin/brew shellenv)"
      # Source: https://github.com/buo/homebrew-cask-upgrade
      brew tap buo/cask-upgrade
      brew tap homebrew/cask-fonts
      brew tap jandedobbeleer/oh-my-posh
    fi
  fi
}

function are_basics_installed() {
  local USER_REPLY="${1:-''}"
  # `awscli` https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-mac.html
  local BREW_BASICS=('awscli' 'bash' 'curl' 'gawk' 'git' 'gnupg' 'gnutls' 'inetutils' 'jq' 'lastpass-cli' 'mackup' 'mas' 'oh-my-posh' 'parallel' 'saml2aws' 'tree' 'vim' 'wget' 'xz' 'yq')
  msg_info 'Will try to install brew if not installed'
  is_brew_installed "${USER_REPLY}"
  msg_info 'Will try to install basic packages with brew'
  install_if_not_installed BREW_BASICS 'brew' "${USER_REPLY}"
}

function is_asdf_installed() {
  local USER_REPLY="${1:-''}"
  if [[ ! -x $(which asdf) ]]; then
    local ASDF_DEPS=('autoconf' 'automake' 'coreutils' 'gcc' 'libtool' 'libxslt' 'libyaml' 'openssl' 'make' 'readline' 'unixodbc' 'unzip')
    msg_info 'Will try to install brew if not installed'
    are_basics_installed "${USER_REPLY}"
    msg_info 'Will try to install asdf dependencies'
    install_if_not_installed ASDF_DEPS 'brew' "${USER_REPLY}"
    msg_info 'Will try to install asdf using git'
    git_install_asdf "${USER_REPLY}"
  fi
}
