#!/usr/bin/env bash
# Enable bash's unofficial strict mode
GITROOT=$(git rev-parse --show-toplevel)
# shellcheck disable=SC1091
. "${GITROOT}"/lib/strict-mode
strictMode
# Enabling utils
# shellcheck disable=SC1091
. "${GITROOT}"/lib/utils
# shellcheck disable=SC1091
. "${GITROOT}"/Ubuntu/base

function get_deb_url_from_xpath() {
  local URL="${1}"
  local XPATH="${2}"
  local DEB_URL
  DEB_URL="$(curl -s \
      "${URL}" | \
      xmllint --html \
      --xpath "${XPATH}" - 2> /dev/null)"
  if [[ "${#DEB_URL}" -lt 4 ]]; then
    return 1
  fi
  echo "${DEB_URL}"
}

function is_repo_present() {
  local REPO="${1}"
  grep -v -E '^#|^ *$' /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep -Fq "${REPO/ppa:/}"
}

function add_apt_repo() {
  local REPO="${1}"
  local FILE_NAME="${2}"
  msg_info "will try to remove repository ${REPO} if it exists already"
  if ! is_repo_present "${REPO}"; then
    if [[ "${REPO}" =~ ^ppa:.*/ppa$ ]]; then
      sudo add-apt-repository -y "${REPO}"
    else
      echo "${REPO}" | sudo tee /etc/apt/sources.list.d/"${FILE_NAME}".list > /dev/null
    fi
  fi
}

function add_apt_key() {
  local URL="${1}"
  local KEY_NAME="${2}"
  local TMP_DOT_FILES="${3}"
  local FILE_NAME="${TMP_DOT_FILES}/${KEY_NAME}.gpg"
  msg_info "Working on apt_key ${KEY_NAME}"
  curl -fsSL "${URL}" | gpg --dearmor > "${FILE_NAME}"
  sudo install -o root -g root -m 644 "${FILE_NAME}" /etc/apt/trusted.gpg.d/
}

function are_extra_cli_tools_installed() {
  declare -a EXTRA_CLI_TOOLS=('bash-completion'
    'ca-certificates'
    'cmake'
    'libcurl4'
    'libcurl4-openssl-dev'
    'libxml2'
    'libxml2-dev'
    'nala'
    'pandoc'
    'pkg-config'
    'tshark')
  install_if_not_installed 'apt' 'n' "${EXTRA_CLI_TOOLS[@]}"
}

function are_extra_tools_installed() {
  declare -a EXTRA_UBUNTU_TOOLS=('ghostwriter'
    'network-manager-openvpn-gnome'
    'openvpn-systemd-resolved'
    'pinta'
    'sublime-text'
    'transmission-gtk'
    'ubuntu-cleaner'
    'vlc'
    'wezterm'
    'wireguard'
    'wireshark-gtk')
  install_if_not_installed 'apt' 'n' "${EXTRA_UBUNTU_TOOLS[@]}"
  declare -a EXTRA_BREW_TOOLS=('bat'
    'bfg'
    'fd'
    'fpp'
    'bitwarden-cli'
    'ripgrep'
    'shellcheck'
    'shfmt'
    'termshark'
    'tmux')
  install_if_not_installed 'brew' 'n' "${EXTRA_BREW_TOOLS[@]}"
}


function is_docker_installed() {
  if [[ ! -x $(command -v docker) ]]; then
    declare -a DOCKER_DEPS=('apt-transport-https'
      'ca-certificates'
      'curl'
      'gnupg-agent')
    install_if_not_installed 'apt' 'n' "${DOCKER_DEPS[@]}"
    sudo apt -y install docker-ce docker-ce-cli containerd.io
  fi
}


function download_and_install_deb() {
  local DEB_URL="${1}"
  local DEB_NAME="${2}"
  local DEB_FILE_NAME="${DEB_NAME}.deb"

  if ! grep -q "${DEB_NAME}" <(sudo apt list --installed 2> /dev/null); then
    msg_info "Will download and install ${DEB_NAME}"
    curl -Lv "${DEB_URL}" -o "${DEB_FILE_NAME}"
    sudo apt install -y "./${DEB_FILE_NAME}"
    rm "${DEB_FILE_NAME}"
  else
    msg_info "${DEB_NAME} is installed already"
  fi
}

function install_desktop_apps() {
  local TMP_DOT_FILES
  TMP_DOT_FILES=$(mktemp -d dot-files.XXXX)

  msg_info 'Adding apt keys for docker, sublime-text'
  declare -A APT_KEYS=(
    ['sublime']='https://download.sublimetext.com/sublimehq-pub.gpg'
    ['wezterm-fury']='https://apt.fury.io/wez/gpg.key'
  )

  for KEY_NAME in "${!APT_KEYS[@]}"; do
    add_apt_key "${APT_KEYS[${KEY_NAME}]}" "${KEY_NAME}" "${TMP_DOT_FILES}"
  done

  msg_info 'Will create /etc/apt/keyrings/docker.asc if does not exist'
  if [[ ! -e /etc/apt/keyrings/docker.asc ]]; then
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc
    msg_info 'Created /etc/apt/keyrings/docker.asc'
  fi

  echo "Adding repositories: docker, GhostWriter, sublime-text"
  declare -A REPOSITORIES=(
    ['docker']="deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    ['ghostwriter']='ppa:wereturtle/ppa'
    ['ubuntu-cleaner']='ppa:gerardpuig/ppa'
    ['sublime']='deb [signed-by=/etc/apt/trusted.gpg.d/sublime.gpg] https://download.sublimetext.com/ apt/stable/'
    ['wezterm']='deb [signed-by=/etc/apt/trusted.gpg.d/wezterm-fury.gpg] https://apt.fury.io/wez/ * *'
  )

  for KEY in "${!REPOSITORIES[@]}"; do
    add_apt_repo "${REPOSITORIES[${KEY}]}" "${KEY}"
  done

  echo "Installing Google Chrome Stable, Slack"
  LATEST_SLACK="$(get_deb_url_from_xpath 'https://slack.com/downloads/instructions/linux?ddl=1&build=deb' 'string(/html/body/main/section[1]/iframe/@src)')"
  declare -A DEB_PACKAGES=(
    ['1password']='https://downloads.1password.com/linux/debian/amd64/stable/1password-latest.deb' # pragma: allowlist secret
    ['google-chrome-stable']='https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'
    ['slack']="${LATEST_SLACK}"
    ['nala']='https://deb.volian.org/volian/pool/main/v/volian-archive/volian-archive-nala_0.3.1_all.deb'
    ['volian-keyring']='https://deb.volian.org/volian/pool/main/v/volian-archive/volian-archive-keyring_0.3.1_all.deb'
  )

  for KEY in "${!DEB_PACKAGES[@]}"; do
    download_and_install_deb "${DEB_PACKAGES[${KEY}]}" "${KEY}"
  done

  retry_command "10" "sudo" "apt" "update"

  is_docker_installed
  are_extra_tools_installed

  # needed for multiple apps
  mkdir -p "${HOME}/bin" || true
  HOME_BIN="${HOME}/bin"

  if ! grep -q 'JetBrains Mono' <(fc-list); then
    echo 'Installing Jetbrains Font'
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/JetBrains/JetBrainsMono/master/install_manual.sh)"
    fc-cache -f -v
  fi

  if ! grep -q 'Nerd Font' <(fc-list); then
    echo 'Installing Nerd Fonts'
    if [[ ! -d "${HOME}/src/nerd-fonts" ]]; then
      git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git "${HOME}/src/nerd-fonts"
    fi
    cd "${HOME}/src/nerd-fonts" || exit 1
    ./install.sh -q
    cd - || exit 1
    fc-cache -f -v
  fi

  if ! piactl --version &>/dev/null; then
    echo "Installing Private Internet Access"
    LATEST_PIA_INSTALLER=$(curl \
        'https://www.privateinternetaccess.com/installer/x/download_installer_linux' | \
        xmllint --html --xpath '//html/head/meta[5]/@content' - 2> /dev/null | cut -d '"' -f2 | cut -d '=' -f2)
    curl -Lv "${LATEST_PIA_INSTALLER}" -o "${TMP_DOT_FILES}/pia-linux.run"
    sh "${TMP_DOT_FILES}/pia-linux.run"
  fi

  if ! jetbrains-toolbox --version &>/dev/null; then
    echo "Installing JetBrains Toolbox"
    LATEST_JETBRAINS_TOOLBOX=$(curl -sL 'https://data.services.jetbrains.com//products/releases?code=TBA&latest=true&type=release' | jq -r '.TBA[].downloads.linux.link')
    curl -Lv "${LATEST_JETBRAINS_TOOLBOX}" -o "${TMP_DOT_FILES}/jetbrains-toolbox.tar.gz"
    tar -xzvf "${TMP_DOT_FILES}/jetbrains-toolbox.tar.gz" -C "${TMP_DOT_FILES}"
    mv "${TMP_DOT_FILES}"/jetbrains-toolbox-*/jetbrains-toolbox "${HOME_BIN}/"
  fi

  if ! grep -q 'Bourne-Again shell' <(file ~/.tmux/plugins/tpm/tpm); then
    echo "tmux plugin manager"
    mkdir -p ~/.tmux/plugins/tpm
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi

  rm -rf "${TMP_DOT_FILES}"
}

if ! /bin/grep -qi 'virtual' <(/bin/grep 'Product Name:' <(sudo dmidecode)); then
  install_desktop_apps
fi

flatpak install re.sonny.Junction -y
xdg-settings set default-web-browser re.sonny.Junction.desktop

are_extra_cli_tools_installed
